'''*****************************************************************************************
   ** FileName:        Des.py
   ** Author:          Jiawei Hawkins
   ** Date:            2019-03-20 星期日 14:04:20
   ** Description:     编写16轮DES的加密与解密 
   **************************************************************************************'''

import copy


'''*****************************************************************************************
   ** Date:            2019-03-20 星期日 14:40:20
   ** Description:     标准数据处理函数
   **************************************************************************************'''

'''*****************************************************************************************
   ** Date:            2019-03-20 星期日 14:04:20
   ** Description:     将输入流信息转换为比特字符串，不足的用0补全，最后bit数为64倍数
   **************************************************************************************'''

def mess2bit(message):
    bit = []
    for i in message:
        tmp = ord(i)
        if( tmp > 255):
            bit.append('00000000')                              #  '00110000'为0的二进制
            tmp = bin(tmp)[2:]
            bit.append(tmp.zfill(((len(tmp) + 7)>>3)<<3)) 
            bit.append('00000000')
        else:
            bit.append(bin(tmp)[2:].zfill(8))
    bit = ''.join(bit)
    length = len(bit)
    if( length % 64 != 0):
        bit = bit + '00000001' + ''.join(['0'] * ( int( (length + 63) / 64) * 64 - length - 8))
    return bit
                       

def bit2mess(bits):
    mess = []
    length = len(bits) + 1
    flag = 1
    tmp = None
    index = 8
    tmp1 = ""
    while( index < length):
        tmp = int(bits[index - 8:index], 2)
        if( flag == 0):
            if(tmp == 0):

                flag = 1
                mess.append(chr(int(tmp1, 2)))
                tmp1 = ""
            else:
                tmp1 = tmp1 + bits[index - 8:index]
        else:
            if(tmp == 0):
                flag = 0
            elif(tmp == 1):
                return ''.join(mess)
            else:
                mess.append(chr(tmp))
        index = index + 8
    return ''.join(mess)


'''*****************************************************************************************
   ** Date:            2019-03-20 星期日 15:01:20
   ** Description:     DES模块处理
   **************************************************************************************'''





    
'''*****************************************************************************************
   ** Date:            2019-03-20 星期日 14:27:20
   ** Description:     编写固定的初始置换IP函数, 输入为64bit 输出为 32bit left, 32bit right
   **************************************************************************************'''


def ip(in_64):
    ip_sheet = [
    57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, \
    13, 5, 63, 55, 47, 39, 31, 23, 15, 7, 56, 48, 40, 32, 24, 16, 8, 0, 58, 50, 42, 34, \
    26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6
    ]

    ans = ['0'] * 64
    for i in range(64):
        ans[i] = in_64[ip_sheet[i]]
    ans = ''.join(ans)
    
    return (ans[:32], ans[32:])


    
'''*****************************************************************************************
   ** Date:            2019-03-20 星期日 14:27:20
   ** Description:     编写固定的初始置换IP函数, 输入为2个32bit(即左 + 右)输出为 64bit
   **************************************************************************************'''

    
def ip_inv(left, right):
    in_64 = left +right
    ip_sheet = [
    57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, \
    13, 5, 63, 55, 47, 39, 31, 23, 15, 7, 56, 48, 40, 32, 24, 16, 8, 0, 58, 50, 42, 34, \
    26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6
    ]
    
    ans = ['0'] * 64
    for i in range(64):
        ans[ip_sheet[i]] = in_64[i]

    return ''.join(ans)




'''*****************************************************************************************
   ** Date:            2019-03-20 星期日 14:27:20
   ** Description:     编写固定的初始置换IP函数, 输入为2个32bit(即左 + 右)输出为 64bit
   **************************************************************************************'''


l, r = ip(mess2bit('中'))
print(l + r)
print( ip_inv(l, r))
print(mess2bit('中'))
